// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package orm

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const banUser = `-- name: BanUser :exec

UPDATE "user"
SET banned = TRUE
WHERE id = $1
`

// ########## MOD ##########
func (q *Queries) BanUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, banUser, id)
	return err
}

const deleteAllUserImages = `-- name: DeleteAllUserImages :exec
DELETE FROM "image"
WHERE "user_id" = $1
`

func (q *Queries) DeleteAllUserImages(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteAllUserImages, userID)
	return err
}

const deleteAllUserPosts = `-- name: DeleteAllUserPosts :exec
DELETE FROM "post"
WHERE "user_id" = $1
`

func (q *Queries) DeleteAllUserPosts(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteAllUserPosts, userID)
	return err
}

const deleteImageById = `-- name: DeleteImageById :exec
DELETE FROM "image"
WHERE id = $1
`

func (q *Queries) DeleteImageById(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteImageById, id)
	return err
}

const deletePostById = `-- name: DeletePostById :exec
DELETE FROM "post"
WHERE id = $1
`

func (q *Queries) DeletePostById(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deletePostById, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "user"
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const deleteUserInteraction = `-- name: DeleteUserInteraction :exec
DELETE FROM "user_interaction"
WHERE post_id = $1 AND user_id = $2
`

type DeleteUserInteractionParams struct {
	PostID int32 `json:"postId"`
	UserID int32 `json:"userId"`
}

func (q *Queries) DeleteUserInteraction(ctx context.Context, arg DeleteUserInteractionParams) error {
	_, err := q.db.Exec(ctx, deleteUserInteraction, arg.PostID, arg.UserID)
	return err
}

const findAllUserImages = `-- name: FindAllUserImages :many
SELECT id, user_id, image_path, created_at
FROM "image"
WHERE user_id = $1
`

func (q *Queries) FindAllUserImages(ctx context.Context, userID int32) ([]Image, error) {
	rows, err := q.db.Query(ctx, findAllUserImages, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ImagePath,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findBotById = `-- name: FindBotById :one
SELECT id, user_id, name, secret
FROM "user_bot"
WHERE id = $1
LIMIT 1
`

func (q *Queries) FindBotById(ctx context.Context, id int32) (UserBot, error) {
	row := q.db.QueryRow(ctx, findBotById, id)
	var i UserBot
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Secret,
	)
	return i, err
}

const findImageByImagePath = `-- name: FindImageByImagePath :one
SELECT id, user_id, image_path, created_at
FROM "image"
WHERE image_path = $1
LIMIT 1
`

func (q *Queries) FindImageByImagePath(ctx context.Context, imagePath string) (Image, error) {
	row := q.db.QueryRow(ctx, findImageByImagePath, imagePath)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ImagePath,
		&i.CreatedAt,
	)
	return i, err
}

const findInteractionByUserIdAndMultiplePostIds = `-- name: FindInteractionByUserIdAndMultiplePostIds :many
SELECT id, post_id, user_id, score
FROM "user_interaction"
WHERE user_id = $1 AND post_id = ANY($2::int[])
`

type FindInteractionByUserIdAndMultiplePostIdsParams struct {
	UserID  int32   `json:"userId"`
	Column2 []int32 `json:"column2"`
}

func (q *Queries) FindInteractionByUserIdAndMultiplePostIds(ctx context.Context, arg FindInteractionByUserIdAndMultiplePostIdsParams) ([]UserInteraction, error) {
	rows, err := q.db.Query(ctx, findInteractionByUserIdAndMultiplePostIds, arg.UserID, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserInteraction
	for rows.Next() {
		var i UserInteraction
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.UserID,
			&i.Score,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findInteractionByUserIdAndPostId = `-- name: FindInteractionByUserIdAndPostId :one
SELECT id, post_id, user_id, score
FROM "user_interaction"
WHERE post_id = $1 AND user_id = $2
LIMIT 1
`

type FindInteractionByUserIdAndPostIdParams struct {
	PostID int32 `json:"postId"`
	UserID int32 `json:"userId"`
}

func (q *Queries) FindInteractionByUserIdAndPostId(ctx context.Context, arg FindInteractionByUserIdAndPostIdParams) (UserInteraction, error) {
	row := q.db.QueryRow(ctx, findInteractionByUserIdAndPostId, arg.PostID, arg.UserID)
	var i UserInteraction
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.UserID,
		&i.Score,
	)
	return i, err
}

const findPagedPosts = `-- name: FindPagedPosts :many
SELECT id, type, user_id, body, source, image_path, created_at
FROM "post"
WHERE "type" = $1
ORDER BY id DESC
LIMIT $2
OFFSET $3
`

type FindPagedPostsParams struct {
	Type   string `json:"type"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) FindPagedPosts(ctx context.Context, arg FindPagedPostsParams) ([]Post, error) {
	rows, err := q.db.Query(ctx, findPagedPosts, arg.Type, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.UserID,
			&i.Body,
			&i.Source,
			&i.ImagePath,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPostById = `-- name: FindPostById :one
SELECT id, type, user_id, body, source, image_path, created_at
FROM "post"
WHERE id = $1
LIMIT 1
`

func (q *Queries) FindPostById(ctx context.Context, id int32) (Post, error) {
	row := q.db.QueryRow(ctx, findPostById, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.UserID,
		&i.Body,
		&i.Source,
		&i.ImagePath,
		&i.CreatedAt,
	)
	return i, err
}

const findPostsByImagePath = `-- name: FindPostsByImagePath :many
SELECT id, type, user_id, body, source, image_path, created_at
FROM "post"
WHERE image_path = $1
`

func (q *Queries) FindPostsByImagePath(ctx context.Context, imagePath pgtype.Text) ([]Post, error) {
	rows, err := q.db.Query(ctx, findPostsByImagePath, imagePath)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.UserID,
			&i.Body,
			&i.Source,
			&i.ImagePath,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPostsByUserId = `-- name: FindPostsByUserId :many
SELECT id, type, user_id, body, source, image_path, created_at
FROM "post"
WHERE user_id = $1
ORDER BY id DESC
LIMIT $2
OFFSET $3
`

type FindPostsByUserIdParams struct {
	UserID int32 `json:"userId"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) FindPostsByUserId(ctx context.Context, arg FindPostsByUserIdParams) ([]Post, error) {
	rows, err := q.db.Query(ctx, findPostsByUserId, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.UserID,
			&i.Body,
			&i.Source,
			&i.ImagePath,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findRandomPosts = `-- name: FindRandomPosts :many
SELECT id, type, user_id, body, source, image_path, created_at
FROM "post"
WHERE "type" = $1
ORDER BY RANDOM()
LIMIT $2
`

type FindRandomPostsParams struct {
	Type  string `json:"type"`
	Limit int32  `json:"limit"`
}

func (q *Queries) FindRandomPosts(ctx context.Context, arg FindRandomPostsParams) ([]Post, error) {
	rows, err := q.db.Query(ctx, findRandomPosts, arg.Type, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.UserID,
			&i.Body,
			&i.Source,
			&i.ImagePath,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, provider_user_id, provider, email, display_name, image_path, category, created_at, banned
FROM "user"
WHERE email = $1
LIMIT 1
`

func (q *Queries) FindUserByEmail(ctx context.Context, email pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, findUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ProviderUserID,
		&i.Provider,
		&i.Email,
		&i.DisplayName,
		&i.ImagePath,
		&i.Category,
		&i.CreatedAt,
		&i.Banned,
	)
	return i, err
}

const findUserById = `-- name: FindUserById :one

SELECT id, provider_user_id, provider, email, display_name, image_path, category, created_at, banned
FROM "user"
WHERE id = $1
LIMIT 1
`

// ########## USERS ##########
func (q *Queries) FindUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, findUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ProviderUserID,
		&i.Provider,
		&i.Email,
		&i.DisplayName,
		&i.ImagePath,
		&i.Category,
		&i.CreatedAt,
		&i.Banned,
	)
	return i, err
}

const findUserByProviderUserId = `-- name: FindUserByProviderUserId :one
SELECT id, provider_user_id, provider, email, display_name, image_path, category, created_at, banned
FROM "user"
WHERE provider_user_id = $1 AND
      "provider" = $2
LIMIT 1
`

type FindUserByProviderUserIdParams struct {
	ProviderUserID pgtype.Text `json:"providerUserId"`
	Provider       pgtype.Text `json:"provider"`
}

func (q *Queries) FindUserByProviderUserId(ctx context.Context, arg FindUserByProviderUserIdParams) (User, error) {
	row := q.db.QueryRow(ctx, findUserByProviderUserId, arg.ProviderUserID, arg.Provider)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ProviderUserID,
		&i.Provider,
		&i.Email,
		&i.DisplayName,
		&i.ImagePath,
		&i.Category,
		&i.CreatedAt,
		&i.Banned,
	)
	return i, err
}

const getImagePostedByUserId = `-- name: GetImagePostedByUserId :many

SELECT id, user_id, image_path, created_at
FROM "image"
WHERE "user_id" = $1
`

// ########## IMAGES ##########
func (q *Queries) GetImagePostedByUserId(ctx context.Context, userID int32) ([]Image, error) {
	rows, err := q.db.Query(ctx, getImagePostedByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ImagePath,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getImagePostedInDayByUserId = `-- name: GetImagePostedInDayByUserId :one
SELECT COUNT(*) AS totalImages
FROM "image"
WHERE "user_id" = $1
    AND DATE("created_at") = CURRENT_DATE
`

func (q *Queries) GetImagePostedInDayByUserId(ctx context.Context, userID int32) (int64, error) {
	row := q.db.QueryRow(ctx, getImagePostedInDayByUserId, userID)
	var totalimages int64
	err := row.Scan(&totalimages)
	return totalimages, err
}

const getInteractionScoreByPostId = `-- name: GetInteractionScoreByPostId :one

SELECT SUM("score") AS totalScore
FROM "user_interaction"
WHERE post_id = $1
`

// ########## INTERACTIONS ##########
func (q *Queries) GetInteractionScoreByPostId(ctx context.Context, postID int32) (int64, error) {
	row := q.db.QueryRow(ctx, getInteractionScoreByPostId, postID)
	var totalscore int64
	err := row.Scan(&totalscore)
	return totalscore, err
}

const getPostedCountByDay = `-- name: GetPostedCountByDay :one

SELECT COUNT(*) AS postCount
FROM "post"
WHERE DATE("created_at") = CURRENT_DATE AND user_id = $1
`

// ########## POSTS ##########
func (q *Queries) GetPostedCountByDay(ctx context.Context, userID int32) (int64, error) {
	row := q.db.QueryRow(ctx, getPostedCountByDay, userID)
	var postcount int64
	err := row.Scan(&postcount)
	return postcount, err
}

const insertBot = `-- name: InsertBot :one
INSERT INTO "user_bot" ("user_id", "name", "secret")
VALUES ($1, $2, $3)
RETURNING id, user_id, name, secret
`

type InsertBotParams struct {
	UserID int32  `json:"userId"`
	Name   string `json:"name"`
	Secret string `json:"secret"`
}

func (q *Queries) InsertBot(ctx context.Context, arg InsertBotParams) (UserBot, error) {
	row := q.db.QueryRow(ctx, insertBot, arg.UserID, arg.Name, arg.Secret)
	var i UserBot
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Secret,
	)
	return i, err
}

const insertBotUser = `-- name: InsertBotUser :one
INSERT INTO "user" (display_name, category)
VALUES ($1, $2)
RETURNING id, provider_user_id, provider, email, display_name, image_path, category, created_at, banned
`

type InsertBotUserParams struct {
	DisplayName pgtype.Text `json:"displayName"`
	Category    string      `json:"category"`
}

func (q *Queries) InsertBotUser(ctx context.Context, arg InsertBotUserParams) (User, error) {
	row := q.db.QueryRow(ctx, insertBotUser, arg.DisplayName, arg.Category)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ProviderUserID,
		&i.Provider,
		&i.Email,
		&i.DisplayName,
		&i.ImagePath,
		&i.Category,
		&i.CreatedAt,
		&i.Banned,
	)
	return i, err
}

const insertImage = `-- name: InsertImage :one
INSERT INTO "image" (user_id, image_path)
VALUES ($1, $2)
RETURNING id, user_id, image_path, created_at
`

type InsertImageParams struct {
	UserID    int32  `json:"userId"`
	ImagePath string `json:"imagePath"`
}

func (q *Queries) InsertImage(ctx context.Context, arg InsertImageParams) (Image, error) {
	row := q.db.QueryRow(ctx, insertImage, arg.UserID, arg.ImagePath)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ImagePath,
		&i.CreatedAt,
	)
	return i, err
}

const insertPost = `-- name: InsertPost :one
INSERT INTO "post" ("type", user_id, body, source, image_path)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, type, user_id, body, source, image_path, created_at
`

type InsertPostParams struct {
	Type      string      `json:"type"`
	UserID    int32       `json:"userId"`
	Body      string      `json:"body"`
	Source    pgtype.Text `json:"source"`
	ImagePath pgtype.Text `json:"imagePath"`
}

func (q *Queries) InsertPost(ctx context.Context, arg InsertPostParams) (Post, error) {
	row := q.db.QueryRow(ctx, insertPost,
		arg.Type,
		arg.UserID,
		arg.Body,
		arg.Source,
		arg.ImagePath,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.UserID,
		&i.Body,
		&i.Source,
		&i.ImagePath,
		&i.CreatedAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO "user" (provider_user_id, "provider", email, display_name, image_path, category)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, provider_user_id, provider, email, display_name, image_path, category, created_at, banned
`

type InsertUserParams struct {
	ProviderUserID pgtype.Text `json:"providerUserId"`
	Provider       pgtype.Text `json:"provider"`
	Email          pgtype.Text `json:"email"`
	DisplayName    pgtype.Text `json:"displayName"`
	ImagePath      pgtype.Text `json:"imagePath"`
	Category       string      `json:"category"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRow(ctx, insertUser,
		arg.ProviderUserID,
		arg.Provider,
		arg.Email,
		arg.DisplayName,
		arg.ImagePath,
		arg.Category,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ProviderUserID,
		&i.Provider,
		&i.Email,
		&i.DisplayName,
		&i.ImagePath,
		&i.Category,
		&i.CreatedAt,
		&i.Banned,
	)
	return i, err
}

const insertUserInteraction = `-- name: InsertUserInteraction :one
INSERT INTO "user_interaction" (post_id, user_id, score)
VALUES ($1, $2, $3)
RETURNING id, post_id, user_id, score
`

type InsertUserInteractionParams struct {
	PostID int32 `json:"postId"`
	UserID int32 `json:"userId"`
	Score  int16 `json:"score"`
}

func (q *Queries) InsertUserInteraction(ctx context.Context, arg InsertUserInteractionParams) (UserInteraction, error) {
	row := q.db.QueryRow(ctx, insertUserInteraction, arg.PostID, arg.UserID, arg.Score)
	var i UserInteraction
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.UserID,
		&i.Score,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, provider_user_id, provider, email, display_name, image_path, category, created_at, banned
FROM "user"
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.ProviderUserID,
			&i.Provider,
			&i.Email,
			&i.DisplayName,
			&i.ImagePath,
			&i.Category,
			&i.CreatedAt,
			&i.Banned,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBotSecret = `-- name: UpdateBotSecret :exec
UPDATE "user_bot"
SET "secret" = $1
WHERE id = $2
`

type UpdateBotSecretParams struct {
	Secret string `json:"secret"`
	ID     int32  `json:"id"`
}

func (q *Queries) UpdateBotSecret(ctx context.Context, arg UpdateBotSecretParams) error {
	_, err := q.db.Exec(ctx, updateBotSecret, arg.Secret, arg.ID)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE "user"
SET display_name = $1,
    image_path = $2
WHERE id = $3
`

type UpdateUserParams struct {
	DisplayName pgtype.Text `json:"displayName"`
	ImagePath   pgtype.Text `json:"imagePath"`
	ID          int32       `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.DisplayName, arg.ImagePath, arg.ID)
	return err
}

const updateUserInteraction = `-- name: UpdateUserInteraction :exec
UPDATE "user_interaction"
SET score = $1
WHERE post_id = $2 AND user_id = $3
`

type UpdateUserInteractionParams struct {
	Score  int16 `json:"score"`
	PostID int32 `json:"postId"`
	UserID int32 `json:"userId"`
}

func (q *Queries) UpdateUserInteraction(ctx context.Context, arg UpdateUserInteractionParams) error {
	_, err := q.db.Exec(ctx, updateUserInteraction, arg.Score, arg.PostID, arg.UserID)
	return err
}
